akka {
  log-dead-letters = on
  log-dead-letters-during-shutdown = off
  jvm-exit-on-fatal-error = on
  log-config-on-start = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "debug"
  stdout-loglevel = "debug"

  actor {
    provider = "cluster"
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = 0.0.0.0
      port = 2552
      port = ${?PORT}
    }
  }

  cluster {
    seed-nodes = []
    seed-nodes = ${?SEED_NODES}
    downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"
  }

  custom-downing {
    stable-after = 10s
    majority-leader-auto-downing {
      majority-member-role = ""
      down-if-in-minority = true
      shutdown-actor-system-on-resolution = true
    }
  }

  discovery {
    method = kubernetes-api
    method = ${?DISCOVERY_METHOD}
    kubernetes-api {
      pod-namespace = "default" // in which namespace cluster is running
      pod-namespace = ${?K8S_NAMESPACE}
      pod-label-selector = "app=replicator" // selector - hot to find other cluster nodes
      pod-label-selector = ${?K8S_SELECTOR}
      pod-port-name = "mgmt" // name of cluster management port
      pod-port-name = ${?K8S_MANAGEMENT_PORT}
    }
  }

  management {
    http {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = "0.0.0.0"
      port = 8081
      bind-port = 8081
    }
    cluster.bootstrap {
      contact-point-discovery {
        required-contact-point-nr = 2 // minimun number of nodes to bootstrap the cluster
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}
      }
    }
  }
}
